package com.example.prometheus;

import java.util.Set;

import org.openrewrite.ExecutionContext;
import org.openrewrite.java.JavaIsoVisitor;
import org.openrewrite.java.tree.Expression;
import org.openrewrite.java.tree.J;
import org.openrewrite.recipe.Recipe;

/** Removes the final `.create()` in X.builder().labelNames(...).create() chains. */
public class DropCreateCall extends Recipe {

    @Override public String getDisplayName() {
        return "Prometheus metrics: drop trailing create()";
    }

    /** Metric simple names we care about (lexical, no attribution needed) */
    private static final Set<String> METRICS =
            Set.of("Counter", "Histogram", "Summary");

    @Override
    public JavaIsoVisitor<ExecutionContext> getVisitor() {
        return new JavaIsoVisitor<>() {
            @Override
            public J.MethodInvocation visitMethodInvocation(J.MethodInvocation mi,
                                                            ExecutionContext ctx) {
                J.MethodInvocation m = super.visitMethodInvocation(mi, ctx);

                // purely lexical guard
                if (!"create".equals(m.getSimpleName())) {
                    return m;
                }

                // We expect select = previous call in the chain
                Expression select = m.getSelect();
                if (!(select instanceof J.MethodInvocation prev)) {
                    return m; // not the pattern we want
                }

                // Ensure the chain started from Counter/Histogram/Summary
                //   Counter.builder()...create()
                Expression root = prev;
                while (root instanceof J.MethodInvocation p && p.getSelect() != null) {
                    root = p.getSelect();
                }
                if (root instanceof J.FieldAccess fa && METRICS.contains(fa.getSimpleName())
                    || root instanceof J.Identifier id && METRICS.contains(id.getSimpleName())) {

                    // keep everything up to labelNames(), drop ".create()"
                    return maybeAutoFormat(m, prev, ctx);
                }
                return m;
            }
        };
    }
}
