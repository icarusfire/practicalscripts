
import java.util.Set;
import java.util.List;
import org.openrewrite.ExecutionContext;
import org.openrewrite.java.JavaIsoVisitor;
import org.openrewrite.java.JavaTemplate;
import org.openrewrite.java.MethodMatcher;
import org.openrewrite.java.tree.Expression;
import org.openrewrite.java.tree.J;
import org.openrewrite.recipe.Recipe;

public class ReplaceStaticBuildWithBuilder extends Recipe {

    @Override public String getDisplayName() {
        return "Prometheus metrics: replace build() with builder()";
    }

    private static final Set<String> METRICS =
            Set.of("Counter", "Gauge", "Histogram", "Summary");

    private static final MethodMatcher BUILD_ANY =
            new MethodMatcher("* build(..)");

    @Override
    public JavaIsoVisitor<ExecutionContext> getVisitor() {
        return new JavaIsoVisitor<>() {

            /* templates --------------------------------------------------- */
            private final JavaTemplate ZERO_ARG_RCVR = JavaTemplate.builder(
                    "#{any()}.builder()")
                .imports("io.prometheus.metrics.core.metrics.*")
                .build();

            private final JavaTemplate ZERO_ARG_STATIC = JavaTemplate.builder(
                    "builder()")
                .imports("io.prometheus.metrics.core.metrics.*")
                .build();

            private final JavaTemplate TWO_ARG_RCVR = JavaTemplate.builder(
                    "#{any()}.builder().name(#{any(java.lang.String)})" +
                    ".help(#{any(java.lang.String)})")
                .imports("io.prometheus.metrics.core.metrics.*")
                .build();

            private final JavaTemplate TWO_ARG_STATIC = JavaTemplate.builder(
                    "builder().name(#{any(java.lang.String)})" +
                    ".help(#{any(java.lang.String)})")
                .imports("io.prometheus.metrics.core.metrics.*")
                .build();

            /* rewrite ----------------------------------------------------- */
            @Override
            public J.MethodInvocation visitMethodInvocation(J.MethodInvocation mi,
                                                            ExecutionContext ctx) {
                J.MethodInvocation m = super.visitMethodInvocation(mi, ctx);
                if (!BUILD_ANY.matches(m)) return m;

                List<Expression> args = m.getArguments();
                int arity = args.size();
                Expression select = m.getSelect() instanceof Expression
                        ? (Expression) m.getSelect()
                        : null;

                // --- static-imported build(...) ---------------------------
                if (select == null) {
                    return arity == 0
                         ? ZERO_ARG_STATIC.apply(getCursor(), m.getCoordinates().replace())
                         : TWO_ARG_STATIC.apply(getCursor(), m.getCoordinates().replace(),
                                                args.get(0), args.get(1));
                }

                // --- qualified Counter.build(...) -------------------------
                if (!METRICS.contains(simpleName(select))) return m;

                return arity == 0
                     ? ZERO_ARG_RCVR.apply(getCursor(), m.getCoordinates().replace(), select)
                     : TWO_ARG_RCVR.apply(getCursor(), m.getCoordinates().replace(),
                                          select, args.get(0), args.get(1));
            }

            private static String simpleName(Expression expr) {
                return expr instanceof J.FieldAccess fa ? fa.getSimpleName()
                     : expr instanceof J.Identifier  id ? id.getSimpleName()
                     : "";
            }
        };
    }
}

----



@Override
public J.MethodInvocation visitMethodInvocation(J.MethodInvocation mi,
                                                ExecutionContext ctx) {
    J.MethodInvocation m = super.visitMethodInvocation(mi, ctx);

    // purely lexical check – works without type attribution
    if (!"build".equals(m.getSimpleName())) {
        return m;
    }

    var args   = m.getArguments();
    int arity  = args.size();
    var select = (Expression) m.getSelect();     // may be null (static import)

    if (select == null) {                        // static-imported build(...)
        return arity == 0
             ? ZERO_ARG_STATIC.apply(getCursor(), m.getCoordinates().replace())
             : TWO_ARG_STATIC.apply(getCursor(), m.getCoordinates().replace(),
                                    args.get(0), args.get(1));
    }

    // Receiver exists → qualify on simple identifier text only
    if (!METRICS.contains(simpleName(select))) {
        return m;                                // not Counter/Gauge/Histogram/Summary
    }

    return arity == 0
         ? ZERO_ARG_RCVR.apply(getCursor(), m.getCoordinates().replace(), select)
         : TWO_ARG_RCVR.apply(getCursor(), m.getCoordinates().replace(),
                              select, args.get(0), args.get(1));
}

