package com.example.prometheus;

import java.util.Set;

import org.openrewrite.ExecutionContext;
import org.openrewrite.java.JavaIsoVisitor;
import org.openrewrite.java.JavaTemplate;
import org.openrewrite.java.MethodMatcher;
import org.openrewrite.java.tree.J;
import org.openrewrite.recipe.Recipe;

public class ReplaceStaticBuildWithBuilder extends Recipe {

    @Override
    public String getDisplayName() {
        return "Prometheus metrics: replace build() with builder()";
    }

    private static final Set<String> METRICS =
            Set.of("Counter", "Gauge", "Histogram", "Summary");

    private static final MethodMatcher BUILD_ANY =
            new MethodMatcher("* build(..)");        // 0 or more args

    @Override
    public JavaIsoVisitor<ExecutionContext> getVisitor() {
        return new JavaIsoVisitor<>() {

            private final JavaTemplate TWO_ARGS = JavaTemplate.builder(this::getCursor,
                    "#{any()}.builder()" +
                    ".name(#{any(java.lang.String)})" +
                    ".help(#{any(java.lang.String)})")
                .imports("io.prometheus.metrics.core.metrics.*")
                .build();

            @Override
            public J.MethodInvocation visitMethodInvocation(J.MethodInvocation mi, ExecutionContext ctx) {
                J.MethodInvocation m = super.visitMethodInvocation(mi, ctx);

                if (!BUILD_ANY.matches(m)) {
                    return m;
                }

                String owner =
                        m.getSelect() == null ? null : simpleName(m.getSelect());

                // ─────── static-import calls (no select) ───────
                if (owner == null) {
                    if (m.getArguments().size() == 0) {
                        // change method name only
                        return m.withName(m.getName().withSimpleName("builder"));
                    }
                    if (m.getArguments().size() == 2) {
                        // keep it receiver-less but expand name/help
                        JavaTemplate tpl = JavaTemplate.builder(this::getCursor,
                                "builder().name(#{any(java.lang.String)}).help(#{any(java.lang.String)})")
                            .build();
                        return m.withTemplate(tpl,
                                m.getCoordinates().replace(),
                                m.getArguments().get(0),
                                m.getArguments().get(1));
                    }
                    return m;
                }

                // ─────── qualified calls like Counter.build(..) ───────
                if (!METRICS.contains(owner)) {
                    return m;
                }

                if (m.getArguments().size() == 0) {
                    // Counter.build() → Counter.builder()
                    return m.withName(m.getName().withSimpleName("builder"));
                }

                if (m.getArguments().size() == 2) {
                    // Counter.build(n,h) → Counter.builder().name(n).help(h)
                    return m.withTemplate(TWO_ARGS,
                            m.getCoordinates().replace(),
                            m.getSelect(),
                            m.getArguments().get(0),
                            m.getArguments().get(1));
                }
                return m;
            }

            private static String simpleName(J expr) {
                return expr instanceof J.FieldAccess fa ? fa.getSimpleName()
                     : expr instanceof J.Identifier   id ? id.getSimpleName()
                     : "";
            }
        };
    }
}
