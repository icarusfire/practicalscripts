public class ReplaceStaticBuildWithBuilder extends Recipe {

    private static final Set<String> METRICS = Set.of(
            "Counter", "Gauge", "Histogram", "Summary");

    private static final MethodMatcher BUILD_0ARGS =
            new MethodMatcher("* build()");
    private static final MethodMatcher BUILD_2ARGS =
            new MethodMatcher("* build(java.lang.String, java.lang.String)");

    @Override
public J.MethodInvocation visitMethodInvocation(J.MethodInvocation mi,
                                                ExecutionContext ctx) {
    J.MethodInvocation m = super.visitMethodInvocation(mi, ctx);

    if (BUILD_0ARGS.matches(m) || BUILD_2ARGS.matches(m)) {
        String fqcn   = m.getMethodType().getDeclaringType().getClassName(); // io.prometheus.client.Counter
        String simple = fqcn.substring(fqcn.lastIndexOf('.') + 1);           // Counter

        // choose body depending on overload
        String body = simple + ".builder()" +
                (BUILD_2ARGS.matches(m)
                        ? ".name(#{any(java.lang.String)}).help(#{any(java.lang.String)})"
                        : "");

        JavaTemplate tpl = JavaTemplate.builder(this::getCursor, body)
                .imports("io.prometheus.metrics.core.metrics." + simple)
                .build();

        return m.withTemplate(tpl, m.getCoordinates().replace(),
                m.getArguments().toArray(new Expression[0]));
    }
    return m;
}

