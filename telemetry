
type: specs.openrewrite.org/v1beta/recipe
name: com.example.prometheus.MigrateSimpleclientToMetrics
displayName: Migrate Prometheus simpleclient → prometheus-metrics
description: >
  Full mechanical migration: moves classes, renames labels(..),
  converts build(..) chains, removes create(), and replaces *.Child types.

recipeList:
  # ────────────────── package / type moves ──────────────────
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: io.prometheus.client.Counter
      newFullyQualifiedTypeName: io.prometheus.metrics.core.metrics.Counter
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: io.prometheus.client.Histogram
      newFullyQualifiedTypeName: io.prometheus.metrics.core.metrics.Histogram
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: io.prometheus.client.Summary
      newFullyQualifiedTypeName: io.prometheus.metrics.core.metrics.Summary
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: io.prometheus.client.CollectorRegistry
      newFullyQualifiedTypeName: io.prometheus.metrics.model.registry.PrometheusRegistry

  # ────────────────── method rename ─────────────────────────
  - org.openrewrite.java.ChangeMethodName:
      methodPattern: "io.prometheus.metrics.core.metrics..* labels(..)"
      newMethodName: labelValues

  # ────────────────── custom visitors ───────────────────────
  - com.example.prometheus.ReplaceStaticBuildWithBuilder
  - com.example.prometheus.RemoveCreateCalls
  - com.example.prometheus.ReplaceChildTypes

import java.util.Set;
import org.openrewrite.ExecutionContext;
import org.openrewrite.java.JavaIsoVisitor;
import org.openrewrite.java.JavaTemplate;
import org.openrewrite.java.tree.Expression;
import org.openrewrite.java.tree.J;
import org.openrewrite.recipe.Recipe;

public class ReplaceStaticBuildWithBuilder extends Recipe {

    @Override
    public String getDisplayName() {
        return "Prometheus metrics: replace build() with builder()";
    }

    /** Metrics whose builder chains we recognise. */
    private static final Set<String> METRICS = Set.of("Counter", "Gauge", "Histogram", "Summary");

    @Override
    public JavaIsoVisitor<ExecutionContext> getVisitor() {
        return new JavaIsoVisitor<>() {

            /* ---------------------------------------------------------- */
            /* build()  -> builder()                                     */
            /* ---------------------------------------------------------- */
            private final JavaTemplate ZERO_ARG_RCVR = JavaTemplate.builder("#{any()}.builder()")
                    .imports("io.prometheus.metrics.core.metrics.*")
                    .build();

            private final JavaTemplate ZERO_ARG_STATIC = JavaTemplate.builder("builder()")
                    .imports("io.prometheus.metrics.core.metrics.*")
                    .build();

            private final JavaTemplate TWO_ARG_RCVR = JavaTemplate.builder(
                    "#{any()}.builder().name(#{any(java.lang.String)}).help(#{any(java.lang.String)})")
                    .imports("io.prometheus.metrics.core.metrics.*")
                    .build();

            private final JavaTemplate TWO_ARG_STATIC = JavaTemplate.builder(
                    "builder().name(#{any(java.lang.String)}).help(#{any(java.lang.String)})")
                    .imports("io.prometheus.metrics.core.metrics.*")
                    .build();

            @Override
            public J.MethodInvocation visitMethodInvocation(J.MethodInvocation mi, ExecutionContext ctx) {
                J.MethodInvocation m = super.visitMethodInvocation(mi, ctx);

                // lexical check – no resolved types required
                if (!"build".equals(m.getSimpleName())) {
                    return m;
                }

                int arity = m.getArguments().size();
                Expression select = m.getSelect(); // may be null when build() is statically imported

                if (select == null) {
                    return arity == 0
                            ? ZERO_ARG_STATIC.apply(getCursor(), m.getCoordinates().replace())
                            : TWO_ARG_STATIC.apply(getCursor(), m.getCoordinates().replace(),
                            m.getArguments().get(0), m.getArguments().get(1));
                }

                if (!METRICS.contains(simpleName(select))) {
                    return m; // some other build() call
                }

                return arity == 0
                        ? ZERO_ARG_RCVR.apply(getCursor(), m.getCoordinates().replace(), select)
                        : TWO_ARG_RCVR.apply(getCursor(), m.getCoordinates().replace(), select,
                        m.getArguments().get(0), m.getArguments().get(1));
            }

            /* ---------------------------------------------------------- */
            /* Counter → Counter.Builder *ONLY* for private static fields */
            /* ---------------------------------------------------------- */
            @Override
            public J.VariableDeclarations visitVariableDeclarations(J.VariableDeclarations vd, ExecutionContext ctx) {
                vd = super.visitVariableDeclarations(vd, ctx);

                // guard: apply only to field declarations (private + static) ----------------
                boolean isPrivateStaticField = vd.getModifiers().stream().anyMatch(mod -> mod.getType() == J.Modifier.Type.Private) &&
                                                vd.getModifiers().stream().anyMatch(mod -> mod.getType() == J.Modifier.Type.Static) &&
                                                getCursor().firstEnclosing(J.ClassDeclaration.class) != null &&
                                                getCursor().firstEnclosing(J.MethodDeclaration.class) == null;

                if (!isPrivateStaticField) {
                    return vd; // local vars or non‑static/non‑private fields untouched
                }

                // check: initializer must be <Metric>.builder(...)
                for (J.VariableDeclarations.NamedVariable v : vd.getVariables()) {
                    Expression init = v.getInitializer();
                    if (!(init instanceof J.MethodInvocation mi && "builder".equals(mi.getSimpleName()))) {
                        continue; // no builder() call → ignore
                    }
                    Expression recv = mi.getSelect();
                    if (recv == null || !METRICS.contains(simpleName(recv))) {
                        continue; // builder() is statically imported or unknown metric → ignore
                    }

                    // only if declared type matches the metric (Counter, Histogram, …)
                    Expression typeExpr = vd.getTypeExpression();
                    if (typeExpr instanceof J.Identifier id && id.getSimpleName().equals(simpleName(recv))) {
                        JavaTemplate newType = JavaTemplate.builder(id.getSimpleName() + ".Builder")
                                .imports("io.prometheus.metrics.core.metrics.*")
                                .build();
                        vd = vd.withTypeExpression(newType.apply(getCursor(), typeExpr.getCoordinates().replace()));
                    }
                }
                return vd;
            }

            /* ---------------------------------------------------------- */
            /* helpers                                                    */
            /* ---------------------------------------------------------- */
            private static String simpleName(Expression expr) {
                return expr instanceof J.FieldAccess fa ? fa.getSimpleName() :
                       expr instanceof J.Identifier id ? id.getSimpleName() : "";
            }
        };
    }
}



