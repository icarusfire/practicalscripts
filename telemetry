type: specs.openrewrite.org/v1beta/recipe
name: com.example.prometheus.MigrateSimpleclientToMetrics
displayName: Migrate Prometheus simpleclient → prometheus-metrics
description: >
  Mechanical migration from the former *simpleclient* API to the new
  *prometheus-metrics* 1.x API: moves classes, renames `labels(…)`,
  and converts `*.build(name, help)` to the fluent builder pattern.

recipeList:

  # ------------------------------------------------------------------
  # 1 – Package / type moves
  # ------------------------------------------------------------------
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: io.prometheus.client.Counter
      newFullyQualifiedTypeName: io.prometheus.metrics.core.metrics.Counter

  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: io.prometheus.client.Gauge
      newFullyQualifiedTypeName: io.prometheus.metrics.core.metrics.Gauge

  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: io.prometheus.client.Histogram
      newFullyQualifiedTypeName: io.prometheus.metrics.core.metrics.Histogram

  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: io.prometheus.client.Summary
      newFullyQualifiedTypeName: io.prometheus.metrics.core.metrics.Summary

  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: io.prometheus.client.CollectorRegistry
      newFullyQualifiedTypeName: io.prometheus.metrics.model.registry.PrometheusRegistry

  # ------------------------------------------------------------------
  # 2 – labels(…)  →  labelValues(…)
  # ------------------------------------------------------------------
  - org.openrewrite.java.ChangeMethodName:
      # limit to the new metrics package so we do not mangle unrelated code
      methodPattern: "io.prometheus.metrics.core.metrics..* labels(..)"
      newMethodName: labelValues

  # ------------------------------------------------------------------
  # 3 – Static build(name, help)  →  builder().name(name).help(help)
  # ------------------------------------------------------------------
  - com.example.prometheus.ReplaceStaticBuildWithBuilder



package com.example.prometheus;

import lombok.EqualsAndHashCode;
import lombok.Value;
import org.openrewrite.ExecutionContext;
import org.openrewrite.java.JavaTemplate;
import org.openrewrite.java.JavaVisitor;
import org.openrewrite.java.tree.J;
import org.openrewrite.java.tree.TypeUtils;
import org.openrewrite.recipe.Recipe;

@Value
@EqualsAndHashCode(callSuper = false)
public class ReplaceStaticBuildWithBuilder extends Recipe {

    @Override
    public String getDisplayName() {
        return "Replace static *.build(name, help) with builder pattern";
    }

    @Override
    public JavaVisitor<ExecutionContext> getVisitor() {
        return new JavaVisitor<>() {
            private final JavaTemplate template = JavaTemplate.builder(this::getCursor,
                    "#{any(java.lang.Class)}.builder()" +
                    ".name(#{any(java.lang.String)})" +
                    ".help(#{any(java.lang.String)})")
                .imports("io.prometheus.metrics.core.metrics.*")
                .build();

            @Override
            public J visitMethodInvocation(J.MethodInvocation mi, ExecutionContext ctx) {
                mi = (J.MethodInvocation) super.visitMethodInvocation(mi, ctx);

                if ("build".equals(mi.getSimpleName())
                        && mi.getArguments().size() == 2
                        && TypeUtils.isOfClassType(mi.getType(),
                           "io.prometheus.metrics.core.metrics.Counter",
                           "io.prometheus.metrics.core.metrics.Gauge",
                           "io.prometheus.metrics.core.metrics.Histogram",
                           "io.prometheus.metrics.core.metrics.Summary")) {

                    return mi.withTemplate(
                            template,
                            mi.getCoordinates().replace(),
                            mi.getSelect(),           // the Counter / Gauge / …
                            mi.getArguments().get(0), // name
                            mi.getArguments().get(1)  // help
                    );
                }
                return mi;
            }
        };
    }
}

<plugin><groupId>org.openrewrite.maven</groupId><artifactId>rewrite-maven-plugin</artifactId><version>5.29.0</version></plugin>

mvn -U rewrite:run -Drewrite.activeRecipe=com.example.prometheus.MigrateSimpleclientToMetrics




<plugin>
      <groupId>org.openrewrite.maven</groupId>
      <artifactId>rewrite-maven-plugin</artifactId>
      <version>6.10.0</version>
      <configuration>
        <!-- root-relative YAML so every sub-module sees the same file -->
        <configLocation>${maven.multiModuleProjectDirectory}/rewrite.yml</configLocation>

        <activeRecipes>
          <recipe>com.example.prometheus.MigrateSimpleclientToMetrics</recipe>
        </activeRecipes>
      </configuration>

      <!-- optional: make your Java recipe available -->
      <dependencies>
        <dependency>
          <groupId>com.example.prometheus</groupId>
          <artifactId>prometheus-rewrite</artifactId>
          <version>${project.version}</version>
        </dependency>
      </dependencies>
    </plugin>

mvn -U \
  org.openrewrite.maven:rewrite-maven-plugin:run \
  -Drewrite.configLocation=${maven.multiModuleProjectDirectory}/rewrite.yml \
  -Drewrite.activeRecipes=com.example.prometheus.MigrateSimpleclientToMetrics
