import java.util.Set;
import org.openrewrite.ExecutionContext;
import org.openrewrite.java.JavaIsoVisitor;
import org.openrewrite.java.JavaTemplate;
import org.openrewrite.java.tree.Expression;
import org.openrewrite.java.tree.J;
import org.openrewrite.java.tree.TypeTree;
import org.openrewrite.recipe.Recipe;

public class ReplaceStaticBuildWithBuilder extends Recipe {

    @Override
    public String getDisplayName() {
        return "Prometheus metrics: replace build() with builder() and migrate Child types";
    }

    /** Recognized metric types. */
    private static final Set<String> METRICS = Set.of("Counter", "Gauge", "Histogram", "Summary");

    @Override
    public JavaIsoVisitor<ExecutionContext> getVisitor() {
        return new JavaIsoVisitor<>() {

            /* ------------------------------------------------------------------- */
            /* Templates for build() → builder() conversion                         */
            /* ------------------------------------------------------------------- */
            private final JavaTemplate ZERO_ARG_RCVR = JavaTemplate.builder("#{any()}.builder()")
                    .imports("io.prometheus.metrics.core.metrics.*")
                    .build();

            private final JavaTemplate ZERO_ARG_STATIC = JavaTemplate.builder("builder()")
                    .imports("io.prometheus.metrics.core.metrics.*")
                    .build();

            private final JavaTemplate TWO_ARG_RCVR = JavaTemplate.builder(
                    "#{any()}.builder().name(#{any(java.lang.String)}).help(#{any(java.lang.String)})")
                    .imports("io.prometheus.metrics.core.metrics.*")
                    .build();

            private final JavaTemplate TWO_ARG_STATIC = JavaTemplate.builder(
                    "builder().name(#{any(java.lang.String)}).help(#{any(java.lang.String)})")
                    .imports("io.prometheus.metrics.core.metrics.*")
                    .build();

            @Override
            public J.MethodInvocation visitMethodInvocation(J.MethodInvocation mi, ExecutionContext ctx) {
                J.MethodInvocation method = super.visitMethodInvocation(mi, ctx);
                // CHANGED START: apply build→builder then buckets→classicUpperBounds
                J.MethodInvocation renamed = renameBuildInvocation(method);
                return renameBucketsInvocation(renamed);
                // CHANGED END
            }

            @Override
            public J.VariableDeclarations visitVariableDeclarations(J.VariableDeclarations vd, ExecutionContext ctx) {
                // First, apply the default visitor
                J.VariableDeclarations decl = super.visitVariableDeclarations(vd, ctx);

                // Migrate private static metric fields using builder()
                decl = renameStaticBuilderField(decl);

                // Migrate any class-level Metric.Child fields to DataPoint types
                decl = renameChildTypeField(J.VariableDeclarations vd) {
                // Only at class scope
                if (getCursor().firstEnclosing(J.MethodDeclaration.class) != null) {
                    return vd;
                }
                TypeTree typeExpr = vd.getTypeExpression();
                if (!(typeExpr instanceof J.FieldAccess fa) || !"Child".equals(fa.getSimpleName())) {
                    return vd;
                }
                String metric = simpleName(fa.getTarget());
                if (!METRICS.contains(metric)) {
                    return vd;
                }
                // Determine replacement type name
                String replacement = metric.equals("Counter")
                        ? "CounterDataPoint"
                        : metric + ".DataPoint";
                JavaTemplate tmpl = JavaTemplate.builder(replacement)
                        .imports("io.prometheus.metrics.core.metrics.*")
                        .build();
                return (J.VariableDeclarations) tmpl.apply(getCursor(), fa.getCoordinates().replace());
            }

            /**
             * CHANGED: Converts builder().buckets(...) calls to builder().classicUpperBounds(...).
             */
            private J.MethodInvocation renameBucketsInvocation(J.MethodInvocation m) {
                if ("buckets".equals(m.getSimpleName())) {
                    // CHANGED: rename 'buckets' to 'classicUpperBounds'
                    return m.withName(m.getName().withSimpleName("classicUpperBounds"));
                }
                return m;
            }

            /* ------------------------------------------------------------------- */
            /* Helpers                                                             */
            /* ------------------------------------------------------------------- */
            private static String simpleName(Expression expr) {
(Expression expr) {
                if (expr instanceof J.FieldAccess fa) {
                    return fa.getSimpleName();
                }
                if (expr instanceof J.Identifier id) {
                    return id.getSimpleName();
                }
                return "";
            }
        };
    }
}
