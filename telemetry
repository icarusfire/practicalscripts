metric_relabel_configs:
  - source_labels: [__name__]
    regex: 'cassandra_s0_nodes_(node\d+)_dc\d+_.*_cql_messages(_count)?'
    target_label: node
    replacement: '${1}'

  - source_labels: [__name__]
    regex: 'cassandra_s0_nodes_node\d+_dc\d+_.*_cql_messages(_count)?'
    target_label: __name__
    replacement: 'cassandra_s0_nodes_cql_messages${1}'

-------------------------------

metric_relabel_configs:
  - source_labels: [__name__]
    regex: 'cassandra_s0_nodes_(node\d+)_dc\d+_.*_cql_messages'
    target_label: node
    replacement: '${1}'
  - source_labels: [__name__]
    regex: 'cassandra_s0_nodes_node\d+_dc\d+_.*_cql_messages'
    target_label: __name__
    replacement: 'cassandra_s0_nodes_cql_messages'


type: specs.openrewrite.org/v1beta/recipe
name: com.example.prometheus.MigrateSimpleclientToMetrics
displayName: Migrate Prometheus simpleclient → prometheus-metrics
description: >
  Full mechanical migration: moves classes, renames labels(..),
  converts build(..) chains, removes create(), and replaces *.Child types.

recipeList:
  # ────────────────── package / type moves ──────────────────
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: io.prometheus.client.Counter
      newFullyQualifiedTypeName: io.prometheus.metrics.core.metrics.Counter
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: io.prometheus.client.Histogram
      newFullyQualifiedTypeName: io.prometheus.metrics.core.metrics.Histogram
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: io.prometheus.client.Summary
      newFullyQualifiedTypeName: io.prometheus.metrics.core.metrics.Summary
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: io.prometheus.client.CollectorRegistry
      newFullyQualifiedTypeName: io.prometheus.metrics.model.registry.PrometheusRegistry

  # ────────────────── method rename ─────────────────────────
  - org.openrewrite.java.ChangeMethodName:
      methodPattern: "io.prometheus.metrics.core.metrics..* labels(..)"
      newMethodName: labelValues

  # ────────────────── custom visitors ───────────────────────
  - com.example.prometheus.ReplaceStaticBuildWithBuilder
  - com.example.prometheus.RemoveCreateCalls
  - com.example.prometheus.ReplaceChildTypes


-------------------------
package com.example.prometheus;

import java.util.Set;

import org.openrewrite.ExecutionContext;
import org.openrewrite.java.JavaIsoVisitor;
import org.openrewrite.java.JavaTemplate;
import org.openrewrite.java.MethodMatcher;
import org.openrewrite.java.tree.J;
import org.openrewrite.recipe.Recipe;

/**
 * *.build(name, help)  →  *.builder().name(name).help(help)
 * Handles imported, fully-qualified, and statically imported usages.
 */
public class ReplaceStaticBuildWithBuilder extends Recipe {

    @Override
    public String getDisplayName() {
        return "Prometheus metrics: replace static build() with builder()";
    }

    /* set of metric simple names we care about */
    private static final Set<String> METRICS =
        Set.of("Counter", "Gauge", "Histogram", "Summary");

    /* matches any *.build(String,String) regardless of package */
    private static final MethodMatcher BUILD_2ARGS =
        new MethodMatcher("* build(java.lang.String, java.lang.String)");

    @Override
    public JavaIsoVisitor<ExecutionContext> getVisitor() {
        return new JavaIsoVisitor<>() {

            /* ----------------------------------------------------------------
             * Template lives INSIDE the visitor, so `this::getCursor`
             * compiles – getCursor() is defined on every JavaVisitor.
             * ----------------------------------------------------------------
             */
            private final JavaTemplate TEMPLATE = JavaTemplate.builder(
                    this::getCursor,
                    "#{any()}.builder()" +
                    ".name(#{any(java.lang.String)})" +
                    ".help(#{any(java.lang.String)})")
                .imports("io.prometheus.metrics.core.metrics.*")
                .build();

            @Override
            public J.MethodInvocation visitMethodInvocation(J.MethodInvocation mi,
                                                            ExecutionContext ctx) {
                J.MethodInvocation m = super.visitMethodInvocation(mi, ctx);

                if (BUILD_2ARGS.matches(m)
                        && m.getSelect() != null
                        && METRICS.contains(simpleName(m.getSelect()))) {

                    return m.withTemplate(
                        TEMPLATE,
                        m.getCoordinates().replace(),
                        m.getSelect(),
                        m.getArguments().get(0),
                        m.getArguments().get(1));
                }
                return m;
            }

            /* Extract right-most identifier from Identifier or FieldAccess */
            private static String simpleName(J expr) {
                return expr instanceof J.FieldAccess fa ? fa.getSimpleName()
                     : expr instanceof J.Identifier   id ? id.getSimpleName()
                     : "";
            }
        };
    }
}


-----------


package com.example.prometheus;

import org.openrewrite.ExecutionContext;
import org.openrewrite.java.JavaIsoVisitor;
import org.openrewrite.java.tree.J;
import org.openrewrite.recipe.Recipe;

/** Drops the now-obsolete `.create()` at the end of metric builder chains. */
public class RemoveCreateCalls extends Recipe {

    @Override
    public String getDisplayName() {
        return "Remove *.create() from metric builder chains";
    }

    @Override
    public JavaIsoVisitor<ExecutionContext> getVisitor() {
        return new JavaIsoVisitor<>() {
            @Override
            public J.MethodInvocation visitMethodInvocation(J.MethodInvocation mi, ExecutionContext ctx) {
                J.MethodInvocation m = super.visitMethodInvocation(mi, ctx);
                return ("create".equals(m.getSimpleName()) && m.getArguments().isEmpty())
                       ? (J.MethodInvocation) m.getSelect()   // just drop the '.create()'
                       : m;
            }
        };
    }
}


----------------


package com.example.prometheus;

import java.util.Map;

import org.openrewrite.ExecutionContext;
import org.openrewrite.java.ChangeType;
import org.openrewrite.java.JavaIsoVisitor;
import org.openrewrite.java.tree.J;
import org.openrewrite.recipe.Recipe;

/**
 * Replaces Counter.Child, Summary.Child, Histogram.Child → their parent types.
 * Using ChangeType internally keeps imports tidy.
 */
public class ReplaceChildTypes extends Recipe {

    @Override
    public String getDisplayName() {
        return "Replace Prometheus *.Child types with parent metric types";
    }

    @Override
    public JavaIsoVisitor<ExecutionContext> getVisitor() {

        Map<String, String> mapping = Map.of(
            "io.prometheus.client.Counter$Child",   "io.prometheus.metrics.core.metrics.Counter",
            "io.prometheus.client.Summary$Child",  "io.prometheus.metrics.core.metrics.Summary",
            "io.prometheus.client.Histogram$Child","io.prometheus.metrics.core.metrics.Histogram"
        );

        return new JavaIsoVisitor<>() {
            @Override
            public J.VariableDeclarations visitVariableDeclarations(J.VariableDeclarations v, ExecutionContext ctx) {
                for (Map.Entry<String, String> e : mapping.entrySet()) {
                    doAfterVisit(new ChangeType(e.getKey(), e.getValue(), false));
                }
                return super.visitVariableDeclarations(v, ctx);
            }
        };
    }
}


root pom


<!-- ── ①  OpenRewrite versions (anywhere inside <properties>) ────────── -->
<properties>
    …
    <openrewrite.api.version>7.29.0</openrewrite.api.version>
    <openrewrite.plugin.version>5.29.0</openrewrite.plugin.version>
</properties>

<!-- ── ②  Register the new recipes module (inside <modules>) ─────────── -->
<modules>
    …
    <module>prometheus-migration-recipes</module>
</modules>

<!-- ── ③  Make the plugin (plus recipes JAR) available to every child ── -->
<build>
  <pluginManagement>
    <plugins>
      <plugin>
        <groupId>org.openrewrite.maven</groupId>
        <artifactId>rewrite-maven-plugin</artifactId>
        <version>${openrewrite.plugin.version}</version>

        <!-- Provide the recipes JAR to the plugin class-path -->
        <dependencies>
          <dependency>
            <groupId>com.example</groupId>                 <!-- adjust -->
            <artifactId>prometheus-migration-recipes</artifactId>
            <version>${project.version}</version>          <!-- same as parent -->
          </dependency>
        </dependencies>
      </plugin>
    </plugins>
  </pluginManagement>
</build>

---------------------



new pom

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                             https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.example</groupId>            <!-- same as parent pom -->
    <artifactId>parent</artifactId>           <!-- parent’s <artifactId> -->
    <version>1.0-SNAPSHOT</version>
  </parent>

  <artifactId>prometheus-migration-recipes</artifactId>
  <packaging>jar</packaging>

  <!-- compile-time only: not shipped with your app -->
  <dependencies>
    <dependency>
      <groupId>org.openrewrite</groupId>
      <artifactId>rewrite-java</artifactId>
      <version>${openrewrite.api.version}</version>
      <scope>provided</scope>
    </dependency>
  </dependencies>

  <!-- keep rewrite.yml inside the jar -->
  <build>
    <resources>
      <resource>
        <directory>${project.basedir}</directory>
        <includes>
          <include>rewrite.yml</include>
        </includes>
      </resource>
    </resources>
  </build>
</project>





-------------------------------------

inside modules:

<plugin>
  <groupId>org.openrewrite.maven</groupId>
  <artifactId>rewrite-maven-plugin</artifactId>

  <!-- run after compilation so the plugin can load the recipes -->
  <executions>
    <execution>
      <id>run-openrewrite</id>
      <phase>process-classes</phase>
      <goals><goal>run</goal></goals>
    </execution>
  </executions>

  <configuration>
    <activeRecipes>
      <recipe>com.example.prometheus.MigrateSimpleclientToMetrics</recipe>
    </activeRecipes>
  </configuration>

  <!-- plugin-only dependency on the recipes JAR -->
  <dependencies>
    <dependency>
      <groupId>com.example</groupId>
      <artifactId>prometheus-migration-recipes</artifactId>
      <version>${project.version}</version>
    </dependency>
  </dependencies>
</plugin>

--


