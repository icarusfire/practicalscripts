import java.util.Set;
import org.openrewrite.ExecutionContext;
import org.openrewrite.java.JavaIsoVisitor;
import org.openrewrite.java.JavaTemplate;
import org.openrewrite.java.tree.Expression;
import org.openrewrite.java.tree.J;
import org.openrewrite.java.tree.TypeTree;
import org.openrewrite.recipe.Recipe;

public class ReplaceStaticBuildWithBuilder extends Recipe {

    @Override
    public String getDisplayName() {
        return "Prometheus metrics: replace build() with builder()";
    }

    /** Metrics whose builder chains we recognise. */
    private static final Set<String> METRICS = Set.of("Counter", "Gauge", "Histogram", "Summary");

    @Override
    public JavaIsoVisitor<ExecutionContext> getVisitor() {
        return new JavaIsoVisitor<>() {

            /* ------------------------------------------------------------------ */
            /* 1. build()  -> builder()                                           */
            /* ------------------------------------------------------------------ */
            private final JavaTemplate ZERO_ARG_RCVR = JavaTemplate.builder("#{any()}.builder()")
                    .imports("io.prometheus.metrics.core.metrics.*")
                    .build();

            private final JavaTemplate ZERO_ARG_STATIC = JavaTemplate.builder("builder()")
                    .imports("io.prometheus.metrics.core.metrics.*")
                    .build();

            private final JavaTemplate TWO_ARG_RCVR = JavaTemplate.builder(
                    "#{any()}.builder().name(#{any(java.lang.String)}).help(#{any(java.lang.String)})")
                    .imports("io.prometheus.metrics.core.metrics.*")
                    .build();

            private final JavaTemplate TWO_ARG_STATIC = JavaTemplate.builder(
                    "builder().name(#{any(java.lang.String)}).help(#{any(java.lang.String)})")
                    .imports("io.prometheus.metrics.core.metrics.*")
                    .build();

            @Override
            public J.MethodInvocation visitMethodInvocation(J.MethodInvocation mi, ExecutionContext ctx) {
                J.MethodInvocation m = super.visitMethodInvocation(mi, ctx);

                // lexical check – no resolved types required
                if (!"build".equals(m.getSimpleName())) {
                    return m;
                }

                int arity = m.getArguments().size();
                Expression select = m.getSelect(); // may be null when build() is statically imported

                if (select == null) {
                    return arity == 0
                            ? ZERO_ARG_STATIC.apply(getCursor(), m.getCoordinates().replace())
                            : TWO_ARG_STATIC.apply(getCursor(), m.getCoordinates().replace(),
                            m.getArguments().get(0), m.getArguments().get(1));
                }

                if (!METRICS.contains(simpleName(select))) {
                    return m; // some other build() call
                }

                return arity == 0
                        ? ZERO_ARG_RCVR.apply(getCursor(), m.getCoordinates().replace(), select)
                        : TWO_ARG_RCVR.apply(getCursor(), m.getCoordinates().replace(), select,
                        m.getArguments().get(0), m.getArguments().get(1));
            }

            /* ------------------------------------------------------------------ */
            /* 2. Counter → Counter.Builder  *only* for private static fields      */
            /* ------------------------------------------------------------------ */
            @Override
            public J.VariableDeclarations visitVariableDeclarations(J.VariableDeclarations vd, ExecutionContext ctx) {
                vd = super.visitVariableDeclarations(vd, ctx);

                // apply only to field declarations: private + static modifiers, outside methods
                boolean isPrivateStaticField = vd.getModifiers().stream().anyMatch(mod -> mod.getType() == J.Modifier.Type.Private) &&
                                                vd.getModifiers().stream().anyMatch(mod -> mod.getType() == J.Modifier.Type.Static) &&
                                                getCursor().firstEnclosing(J.MethodDeclaration.class) == null;

                if (!isPrivateStaticField) {
                    return vd;
                }

                // type expression must be a bare metric (Counter, Histogram, ...)
                TypeTree typeExpr = vd.getTypeExpression();
                if (!(typeExpr instanceof J.Identifier id) || !METRICS.contains(id.getSimpleName())) {
                    return vd;
                }
                String metric = id.getSimpleName();

                // at least one variable in this declaration must have an initializer containing "<Metric>.builder("
                boolean builderPresent = vd.getVariables().stream()
                        .map(J.VariableDeclarations.NamedVariable::getInitializer)
                        .filter(expr -> expr != null)
                        .anyMatch(expr -> expr.toString().contains(metric + ".builder("));

                if (!builderPresent) {
                    return vd; // no builder() chain → leave type unchanged
                }

                // rewrite Counter → Counter.Builder once per declaration
                JavaTemplate newType = JavaTemplate.builder(metric + ".Builder")
                        .imports("io.prometheus.metrics.core.metrics.*")
                        .build();

                TypeTree newTypeExpr = (TypeTree) newType.apply(getCursor(), id.getCoordinates().replace());
                return vd.withTypeExpression(newTypeExpr);
            }

            /* ------------------------------------------------------------------ */
            /* helpers                                                            */
            /* ------------------------------------------------------------------ */
            private static String simpleName(Expression expr) {
                return expr instanceof J.FieldAccess fa ? fa.getSimpleName() :
                       expr instanceof J.Identifier id ? id.getSimpleName() : "";
            }
        };
    }
}
