<dependency>
    <groupId>io.prometheus</groupId>
    <artifactId>prometheus-metrics-core</artifactId>
    <version>1.3.8</version>
</dependency>

<!-- scrape endpoint, same role as simpleclient_httpserver -->
<dependency>
    <groupId>io.prometheus</groupId>
    <artifactId>prometheus-metrics-exporter-httpserver</artifactId>
    <version>1.3.8</version>
</dependency>

<!-- JVM metrics (optional, keep only if you used DefaultExports before) -->
<dependency>
    <groupId>io.prometheus</groupId>
    <artifactId>prometheus-metrics-instrumentation-jvm</artifactId>
    <version>1.3.8</version>
</dependency>


implementation 'io.prometheus:prometheus-metrics-core:1.3.8'
implementation 'io.prometheus:prometheus-metrics-exporter-httpserver:1.3.8'
implementation 'io.prometheus:prometheus-metrics-instrumentation-jvm:1.3.8' // optional
``` :contentReference[oaicite:0]{index=0}  
</details>

> **Why only these three?**  
> * `prometheus-metrics-core` replaces `simpleclient`  
> * `prometheus-metrics-exporter-httpserver` replaces `simpleclient_httpserver`  
> * `prometheus-metrics-instrumentation-jvm` replaces `simpleclient_hotspot` and is optional if you expose JVM metrics. :contentReference[oaicite:1]{index=1}  


---

### 2. Code-level changes â€“ minimal but complete

```java
import io.prometheus.metrics.core.metrics.Counter;
import io.prometheus.metrics.core.metrics.Histogram;
import io.prometheus.metrics.core.metrics.Summary;
import io.prometheus.metrics.model.registry.PrometheusRegistry;

public final class StreamMetrics {

    public static final String LABEL_FULL = "full";
    public static final String LABEL_TOTALSYNCTIME = "totalsynctime";

    /* ---------- Metric definitions (created, NOT yet registered) ---------- */

    private static final Summary mappingSummaryDuration = Summary.builder()
            .name("notifications_mapping_duration")
            .help("Summary duration of the bridge phases of the stream")
            .quantile(0.5, 0.05)
            .quantile(0.9, 0.01)
            .quantile(0.95, 0.01)
            .quantile(0.99, 0.01)
            .quantile(0.999, 0.002)
            .quantile(0.9995, 0.001)
            .labelNames("stream", "topic", "phase")
            .create();   // create() == old simpleclient create()

    private static final Histogram mappingHistogramDuration = Histogram.builder()
            .name("notification_duration_hist")
            .help("Histogram duration of the stream")
            .buckets(8, 16, 32, 64, 128, 256, 512, 1024, Double.POSITIVE_INFINITY)
            .labelNames("stream", "topic", "phase")
            .create();

    private static final Counter mappingFailures = Counter.builder()
            .name("notifications_mapping_failures")
            .help("Number of failures in the mapping phases of the stream")
            .labelNames("stream", "topic", "phase")
            .create();

    private static final Counter mappingSuccess = Counter.builder()
            .name("notifications_mapping_successes")
            .help("Number of successfully mapped messages in the stream")
            .labelNames("stream", "topic")
            .create();

    private static final Counter mappingSkipped = Counter.builder()
            .name("notifications_mapping_skipped")
            .help("Number of skipped messages in the stream")
            .labelNames("stream", "topic")
            .create();

    private static final Histogram notificationMsgSize = Histogram.builder()
            .name("notification_msg_sizes_kb_hist")
            .help("Size of the notifications")
            .buckets(8, 16, 32, 64, 128, 256, 512, 1024, Double.POSITIVE_INFINITY)
            .labelNames("stream", "topic", "phase")
            .create();

    /* ---------- Registration helper ---------- */

    public static void register(PrometheusRegistry registry) {
        mappingSummaryDuration.register(registry);
        mappingHistogramDuration.register(registry);
        mappingFailures.register(registry);
        mappingSuccess.register(registry);
        mappingSkipped.register(registry);
        notificationMsgSize.register(registry);
    }

    private StreamMetrics() { /* static-only utility */ }
}


// usually during app bootstrap
new io.prometheus.metrics.exporter.httpserver.HTTPServer.Builder()
        .port(9100)            // choose your port
        .buildAndStart();
